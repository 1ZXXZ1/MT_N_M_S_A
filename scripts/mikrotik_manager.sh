#!/bin/bash

# –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏ MikroTik
# –ê–≤—Ç–æ—Ä: –°–µ—Ç–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASE_DIR="$(dirname "$SCRIPT_DIR")"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # –ë–µ–∑ —Ü–≤–µ—Ç–∞

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[–ò–ù–§–û]${NC} $1"; }
log_success() { echo -e "${GREEN}[–£–°–ü–ï–•]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]${NC} $1"; }
log_error() { echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1"; }
log_debug() { echo -e "${PURPLE}[–û–¢–õ–ê–î–ö–ê]${NC} $1"; }
log_action() { echo -e "${CYAN}[–î–ï–ô–°–¢–í–ò–ï]${NC} $1"; }

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VARS_FILE="$BASE_DIR/vars/mikrotik_vars.yml"
CONFIG_DIR="$BASE_DIR/configs"
RESULTS_DIR="$BASE_DIR/results"
PLAYBOOKS_DIR="$BASE_DIR/playbooks"
BACKUP_DIR="$BASE_DIR/backups"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local deps=("ansible" "sshpass" "python3")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: $dep"
            exit 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python YAML –º–æ–¥—É–ª—è
    if ! python3 -c "import yaml" &> /dev/null; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python YAML –º–æ–¥—É–ª—è..."
        pip3 install pyyaml
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ nano
    if ! command -v nano &> /dev/null; then
        log_warning "–†–µ–¥–∞–∫—Ç–æ—Ä nano –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω vi"
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YAML –Ω–∞ Python
python_list_routers() {
    python3 -c "
import yaml
import sys

try:
    with open('$VARS_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}
    
    routers_found = False
    for key, value in data.items():
        if key.startswith('router_'):
            routers_found = True
            enabled = 'üü¢ –í–ö–õ–Æ–ß–ï–ù' if value.get('enabled') else 'üî¥ –í–´–ö–õ–Æ–ß–ï–ù'
            desc = value.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            host = value.get('host', '–ù–µ—Ç —Ö–æ—Å—Ç–∞')
            group = value.get('group', 'unknown')
            print(f'{key:20} {desc:25} {host:15} {group:10} {enabled}')
    
    if not routers_found:
        print('–†–æ—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
        
except FileNotFoundError:
    print('–û–®–ò–ë–ö–ê: –§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: $VARS_FILE')
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
"
}

python_get_router_groups() {
    python3 -c "
import yaml
import sys

try:
    with open('$VARS_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}
    
    groups = {}
    for key, value in data.items():
        if key.startswith('router_'):
            group = value.get('group', 'unknown')
            if group not in groups:
                groups[group] = []
            groups[group].append(key)
    
    for group, routers in groups.items():
        enabled_count = sum(1 for r in routers if data[r].get('enabled'))
        print(f'{group}: {len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤ ({enabled_count} –≤–∫–ª—é—á–µ–Ω–æ)')
        for router in routers:
            status = 'üü¢' if data[router].get('enabled') else 'üî¥'
            print(f'  {status} {router}')
        
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
"
}

python_get_routers_by_group() {
    local group="$1"
    python3 -c "
import yaml
import sys

try:
    with open('$VARS_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}
    
    routers = []
    for key, value in data.items():
        if key.startswith('router_') and value.get('group') == '$group':
            routers.append(key)
    
    print(' '.join(routers))
        
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
"
}

python_add_router() {
    local name="$1"
    local ip="$2"
    local desc="$3"
    local group="$4"
    local password="$5"
    
    python3 -c "
import yaml
import sys

try:
    # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with open('$VARS_FILE', 'r') as f:
            data = yaml.safe_load(f) or {}
    except FileNotFoundError:
        data = {'mikrotik_common': {'ssh_options': '-o HostKeyAlgorithms=+ssh-rsa -o KexAlgorithms=+diffie-hellman-group1-sha1'}}
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    data['$name'] = {
        'host': '$ip',
        'user': 'admin',
        'password': '$password',
        'description': '$desc',
        'enabled': False,
        'group': '${group:-branch}',
        'config_file': '${name}_config.txt'
    }
    
    # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ
    with open('$VARS_FILE', 'w') as f:
        yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
    
    print('SUCCESS')
    
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
    sys.exit(1)
"
}

python_remove_router() {
    local name="$1"
    
    python3 -c "
import yaml
import sys

try:
    with open('$VARS_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}
    
    if '$name' in data:
        del data['$name']
        with open('$VARS_FILE', 'w') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        print('SUCCESS')
    else:
        print('–û–®–ò–ë–ö–ê: –†–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        sys.exit(1)
        
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
    sys.exit(1)
"
}

python_toggle_router() {
    local name="$1"
    local status="$2"
    
    python3 -c "
import yaml
import sys

try:
    with open('$VARS_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}
    
    if '$name' in data:
        data['$name']['enabled'] = $status
        with open('$VARS_FILE', 'w') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        print('SUCCESS')
    else:
        print('–û–®–ò–ë–ö–ê: –†–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        sys.exit(1)
        
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
    sys.exit(1)
"
}

python_enable_group() {
    local group="$1"
    local status="$2"
    
    python3 -c "
import yaml
import sys

try:
    with open('$VARS_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}
    
    updated = 0
    for key, value in data.items():
        if key.startswith('router_') and value.get('group') == '$group':
            data[key]['enabled'] = $status
            updated += 1
    
    if updated > 0:
        with open('$VARS_FILE', 'w') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        print(f'SUCCESS:{updated}')
    else:
        print('–û–®–ò–ë–ö–ê: –†–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        sys.exit(1)
        
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
    sys.exit(1)
"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_usage() {
    cat << EOF
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏ MikroTik

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–æ–ø—Ü–∏–∏]

–ö–æ–º–∞–Ω–¥—ã:
  list                   –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
  list-groups            –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ—É—Ç–µ—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
  deploy [—Ä–æ—É—Ç–µ—Ä|–≥—Ä—É–ø–ø–∞] –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ —Ä–æ—É—Ç–µ—Ä, –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
  deploy-all             –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ)
  deploy-group <–≥—Ä—É–ø–ø–∞>  –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ
  verify                 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  add-router <–∏–º—è>       –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
  edit-router <–∏–º—è>      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ nano
  edit-vars              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ nano
  remove-router <–∏–º—è>    –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
  enable <—Ä–æ—É—Ç–µ—Ä>        –í–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
  disable <—Ä–æ—É—Ç–µ—Ä>       –í—ã–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
  enable-group <–≥—Ä—É–ø–ø–∞>  –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ
  disable-group <–≥—Ä—É–ø–ø–∞> –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ
  show-config <—Ä–æ—É—Ç–µ—Ä>   –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞
  show-results <—Ä–æ—É—Ç–µ—Ä>  –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞
  backup                 –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  cleanup                –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  status                 –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

–ü—Ä–∏–º–µ—Ä—ã:
  $0 list
  $0 deploy                  # –í—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
  $0 deploy router_rt1       # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
  $0 deploy-group core       # –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ core
  $0 deploy-all              # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
  $0 edit-router router_rt1  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Ä–æ—É—Ç–µ—Ä–∞
  $0 enable-group branch     # –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã branch
  $0 status                  # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

–ì—Ä—É–ø–ø—ã: core, branch, test
EOF
}

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
list_routers() {
    log_info "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤:"
    echo "===================================================================="
    echo "–ò–º—è                 –û–ø–∏—Å–∞–Ω–∏–µ           –•–æ—Å—Ç           –ì—Ä—É–ø–ø–∞      –°—Ç–∞—Ç—É—Å"
    echo "===================================================================="
    python_list_routers
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ—É—Ç–µ—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
list_groups() {
    log_info "–†–æ—É—Ç–µ—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º:"
    python_get_router_groups
}

# –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
deploy_config() {
    local target="$1"
    
    if [ -z "$target" ]; then
        log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã..."
        cd "$PLAYBOOKS_DIR" && ansible-playbook "main.yml" -e "operation_mode=deploy"
    
    elif [[ "$target" == router_* ]]; then
        log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ $target..."
        cd "$PLAYBOOKS_DIR" && ansible-playbook "single_router.yml" -e "target_router=$target"
    
    else
        log_error "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å: $target. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è —Ä–æ—É—Ç–µ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—É"
        show_usage
        exit 1
    fi
}

# –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã

deploy_all() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï —Ä–æ—É—Ç–µ—Ä—ã..."
    cd "$PLAYBOOKS_DIR" && ansible-playbook "deploy_all_routers_simple.yml"
}
# –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≥—Ä—É–ø–ø—É
deploy_group() {
    local group="$1"
    
    if [ -z "$group" ]; then
        log_error "–ò–º—è –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ: $group"
    routers=$(python_get_routers_by_group "$group")
    
    if [ -z "$routers" ]; then
        log_error "–†–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $group"
        exit 1
    fi
    
    log_info "–†–æ—É—Ç–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ $group: $routers"
    
    for router in $routers; do
        log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ $router..."
        cd "$PLAYBOOKS_DIR" && ansible-playbook "single_router.yml" -e "target_router=$router force_enable=true"
    done
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å
verify_network() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
    cd "$PLAYBOOKS_DIR" && ansible-playbook "main.yml" -e "operation_mode=verify"
}

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
add_router() {
    local router_name="$1"
    
    if [ -z "$router_name" ]; then
        log_error "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    if [[ ! "$router_name" =~ ^router_ ]]; then
        log_warning "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'router_'"
    fi
    
    log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞: $router_name"
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–æ—É—Ç–µ—Ä–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞: " ip_address
    read -p "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: " description
    read -p "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ä–æ—É—Ç–µ—Ä–∞ [core/branch/test]: " group
    read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ä–æ—É—Ç–µ—Ä–∞: " password
    echo
    
    if [ -z "$ip_address" ] || [ -z "$description" ] || [ -z "$password" ]; then
        log_error "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local config_file="$CONFIG_DIR/${router_name}_config.txt"
    cat > "$config_file" << EOF
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $router_name
# –û–ø–∏—Å–∞–Ω–∏–µ: $description
# –ì—Ä—É–ø–ø–∞: ${group:-branch}
# –°–æ–∑–¥–∞–Ω: $(date)
# ===== –ö–û–ú–ê–ù–î–´ –ü–†–û–í–ï–†–ö–ò =====
/interface print
/ip address print
/ip dhcp-server print
/ip route print
EOF
    
    log_success "–®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: $config_file"
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Python
    log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –≤ —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    result=$(python_add_router "$router_name" "$ip_address" "$description" "$group" "$password")
    
    if [ "$result" = "SUCCESS" ]; then
        log_success "–†–æ—É—Ç–µ—Ä $router_name —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        
        # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –≤ deploy_all_routers_simple.yml
        log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ playbook deploy_all_routers_simple.yml..."
        update_deploy_playbook "$router_name"
        
        log_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        log_info "1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: $0 edit-router $router_name"
        log_info "2. –í–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä: $0 enable $router_name"
        log_info "3. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: $0 deploy $router_name"
    else
        log_error "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞: $result"
        exit 1
    fi
}

# –û–±–Ω–æ–≤–∏—Ç—å playbook —Å –Ω–æ–≤—ã–º —Ä–æ—É—Ç–µ—Ä–æ–º
update_deploy_playbook() {
    local router_name="$1"
    local playbook_file="$PLAYBOOKS_DIR/deploy_all_routers_simple.yml"
    
    log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ $router_name –≤ $playbook_file"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    local temp_file=$(mktemp)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è YAML —Ñ–∞–π–ª–∞
    python3 -c "
import yaml
import sys

try:
    # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ playbook
    with open('$playbook_file', 'r') as f:
        playbook = yaml.safe_load(f) or {}
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É 'Create list of enabled routers'
    tasks = playbook[0]['tasks']
    
    # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    last_router_index = 0
    for i, task in enumerate(tasks):
        if 'Add router_' in task.get('name', ''):
            last_router_index = i
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    new_task = {
        'name': f'Add $router_name if enabled',
        'set_fact': {
            'enabled_routers': '{{ enabled_routers + [\"$router_name\"] }}'
        },
        'when': f'mikrotik_vars.$router_name.enabled | default(false) | bool'
    }
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    tasks.insert(last_router_index + 1, new_task)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('$playbook_file', 'w') as f:
        yaml.dump(playbook, f, default_flow_style=False, allow_unicode=True, indent=2, sort_keys=False)
    
    print('SUCCESS')
    
except Exception as e:
    print(f'–û–®–ò–ë–ö–ê: {e}')
    sys.exit(1)
" > "$temp_file"
    
    local result=$(cat "$temp_file")
    rm "$temp_file"
    
    if [ "$result" = "SUCCESS" ]; then
        log_success "Playbook —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å playbook: $result"
        log_info "–†–æ—É—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–æ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ deploy_all_routers_simple.yml"
    fi
}

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞
edit_router() {
    local router_name="$1"
    
    if [ -z "$router_name" ]; then
        log_error "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    local config_file="$CONFIG_DIR/${router_name}_config.txt"
    
    if [ ! -f "$config_file" ]; then
        log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $config_file"
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        add_router "$router_name"
        return
    fi
    
    log_info "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è $router_name..."
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nano –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ vi
    if command -v nano &> /dev/null; then
        nano "$config_file"
    else
        vi "$config_file"
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $config_file"
}

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
edit_vars() {
    log_info "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    
    if command -v nano &> /dev/null; then
        nano "$VARS_FILE"
    else
        vi "$VARS_FILE"
    fi
    
    log_success "–§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω: $VARS_FILE"
}

# –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
remove_router() {
    local router_name="$1"
    
    if [ -z "$router_name" ]; then
        log_error "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    log_warning "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç —Ä–æ—É—Ç–µ—Ä $router_name –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        local config_file="$CONFIG_DIR/${router_name}_config.txt"
        if [ -f "$config_file" ]; then
            rm "$config_file"
            log_success "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω: $config_file"
        fi
        
        # –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
        result=$(python_remove_router "$router_name")
        
        if [ "$result" = "SUCCESS" ]; then
            log_success "–†–æ—É—Ç–µ—Ä $router_name —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
            
            # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–∑ deploy_all_routers_simple.yml
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏–∑ playbook..."
            remove_from_deploy_playbook "$router_name"
        else
            log_error "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞: $result"
        fi
    else
        log_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–∑ playbook
remove_from_deploy_playbook() {
    local router_name="$1"
    local playbook_file="$PLAYBOOKS_DIR/deploy_all_routers_simple.yml"
    
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ $router_name –∏–∑ $playbook_file"
    
    # –°–æ–∑–¥–∞–µ–º backup
    cp "$playbook_file" "$playbook_file.backup"
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    sed -i "/Add $router_name if enabled/,/when: mikrotik_vars.$router_name.enabled/d" "$playbook_file"
    
    if [ $? -eq 0 ]; then
        log_success "–†–æ—É—Ç–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ playbook"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–∑ playbook"
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backup
        cp "$playbook_file.backup" "$playbook_file"
        log_info "–†–æ—É—Ç–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ deploy_all_routers_simple.yml"
    fi
    
    # –£–¥–∞–ª—è–µ–º backup
    rm -f "$playbook_file.backup"
}


# –í–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
enable_router() {
    local router_name="$1"
    toggle_router "$router_name" "True"
}

# –í—ã–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
disable_router() {
    local router_name="$1"
    toggle_router "$router_name" "False"
}

# –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–æ—É—Ç–µ—Ä–∞
toggle_router() {
    local router_name="$1"
    local status="$2"
    
    if [ -z "$router_name" ]; then
        log_error "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    log_info "$( [ "$status" = "True" ] && echo "–í–∫–ª—é—á–µ–Ω–∏–µ" || echo "–í—ã–∫–ª—é—á–µ–Ω–∏–µ" ) —Ä–æ—É—Ç–µ—Ä–∞ $router_name..."
    result=$(python_toggle_router "$router_name" "$status")
    
    if [ "$result" = "SUCCESS" ]; then
        log_success "–†–æ—É—Ç–µ—Ä $router_name $( [ "$status" = "True" ] && echo "–≤–∫–ª—é—á–µ–Ω" || echo "–≤—ã–∫–ª—é—á–µ–Ω" )"
    else
        log_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞: $result"
        exit 1
    fi
}

# –í–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É —Ä–æ—É—Ç–µ—Ä–æ–≤
enable_group() {
    local group="$1"
    toggle_group "$group" "True"
}

# –í—ã–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É —Ä–æ—É—Ç–µ—Ä–æ–≤
disable_group() {
    local group="$1"
    toggle_group "$group" "False"
}

# –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É —Ä–æ—É—Ç–µ—Ä–æ–≤
toggle_group() {
    local group="$1"
    local status="$2"
    
    if [ -z "$group" ]; then
        log_error "–ò–º—è –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    log_info "$( [ "$status" = "True" ] && echo "–í–∫–ª—é—á–µ–Ω–∏–µ" || echo "–í—ã–∫–ª—é—á–µ–Ω–∏–µ" ) –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: $group..."
    result=$(python_enable_group "$group" "$status")
    
    if [[ "$result" == SUCCESS:* ]]; then
        count=$(echo "$result" | cut -d: -f2)
        log_success "$count —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ $group $( [ "$status" = "True" ] && echo "–≤–∫–ª—é—á–µ–Ω—ã" || echo "–≤—ã–∫–ª—é—á–µ–Ω—ã" )"
    else
        log_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: $result"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞
show_config() {
    local router_name="$1"
    
    if [ -z "$router_name" ]; then
        log_error "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    local config_file="$CONFIG_DIR/${router_name}_config.txt"
    if [ -f "$config_file" ]; then
        log_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $router_name:"
        echo "=========================================="
        cat "$config_file"
        echo "=========================================="
    else
        log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $config_file"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
show_results() {
    local router_name="$1"
    
    if [ -z "$router_name" ]; then
        log_error "–ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        show_usage
        exit 1
    fi
    
    local latest_result=$(ls -t "$RESULTS_DIR/mikrotik_results_${router_name}"*.txt 2>/dev/null | head -1)
    
    if [ -n "$latest_result" ]; then
        log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è $router_name:"
        echo "=========================================="
        cat "$latest_result"
        echo "=========================================="
    else
        log_error "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è $router_name –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
backup_configs() {
    local backup_dir="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S)"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ $backup_dir"
    mkdir -p "$backup_dir"
    
    cp -r "$CONFIG_DIR" "$backup_dir/"
    cp "$VARS_FILE" "$backup_dir/"
    
    # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    cat > "$backup_dir/backup_info.txt" << EOF
–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $(date)
–†–æ—É—Ç–µ—Ä–æ–≤: $(python_list_routers | wc -l)
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $backup_dir
EOF
    
    log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
    echo "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $backup_dir"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
cleanup_results() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π..."
    find "$RESULTS_DIR" -name "mikrotik_results_*.txt" -mtime +7 -delete
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MikroTik"
    echo "=========================================="
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
    total_routers=$(python_list_routers | grep -c "router_")
    enabled_routers=$(python_list_routers | grep -c "üü¢ –í–ö–õ–Æ–ß–ï–ù")
    
    echo "–†–æ—É—Ç–µ—Ä–æ–≤: $enabled_routers/$total_routers –≤–∫–ª—é—á–µ–Ω–æ"
    echo "–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: $CONFIG_DIR ($(ls "$CONFIG_DIR"/*.txt 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤)"
    echo "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $RESULTS_DIR ($(ls "$RESULTS_DIR"/*.txt 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤)"
    echo "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $BACKUP_DIR ($(ls "$BACKUP_DIR" 2>/dev/null | wc -l) –∫–æ–ø–∏–π)"
    echo ""
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    ls -lt "$RESULTS_DIR"/mikrotik_results_*.txt 2>/dev/null | head -5 | awk '{print $6, $7, $8, $9}'
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    sudo apt update
    sudo apt install -y ansible sshpass python3-pip nano
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pip3 install pyyaml
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
main() {
    local command="$1"
    local argument="$2"
    
    case "$command" in
        "install-deps")
            install_dependencies
            ;;
        *)
            check_dependencies
            ;;
    esac
    
    case "$command" in
        "list")
            list_routers
            ;;
        "list-groups")
            list_groups
            ;;
        "deploy")
            deploy_config "$argument"
            ;;
        "deploy-all")
            deploy_all
            ;;
        "deploy-group")
            deploy_group "$argument"
            ;;
        "verify")
            verify_network
            ;;
        "add-router")
            add_router "$argument"
            ;;
        "edit-router")
            edit_router "$argument"
            ;;
        "edit-vars")
            edit_vars
            ;;
        "remove-router")
            remove_router "$argument"
            ;;
        "enable")
            enable_router "$argument"
            ;;
        "disable")
            disable_router "$argument"
            ;;
        "enable-group")
            enable_group "$argument"
            ;;
        "disable-group")
            disable_group "$argument"
            ;;
        "show-config")
            show_config "$argument"
            ;;
        "show-results")
            show_results "$argument"
            ;;
        "backup")
            backup_configs
            ;;
        "cleanup")
            cleanup_results
            ;;
        "status")
            show_status
            ;;
        "install-deps")
            # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
            ;;
        ""|"help")
            show_usage
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_usage
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
main "$@"
